# -*- coding: utf-8 -*-
"""HPC LW2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tICV4zHitpE0uN9T6Ob9hYu8yMCRXWw2
"""

from numba import cuda
import matplotlib.pyplot as plt
import numpy as np
import time

from google.colab import drive
drive.mount('/content/drive')

im = plt.imread("/content/drive/MyDrive/Colab Notebooks/image.jpg")

shape = np.shape(im)
shape

imflatten = im.copy().reshape(shape[0]*shape[1],3)

shape2 = np.shape(imflatten)

t1 = time.time()

for i in imflatten:
  gray = ((i[0]+i[1]+[2])/3)
  i[0], i[1], i[2] = gray, gray, gray

t2 = time.time()

print(t2-t1)

imgray1 = imflatten.reshape(1080, 1920, 3)

from PIL import Image
imcpu = Image.fromarray(imgray1)
imcpu.save("/content/drive/MyDrive/Colab Notebooks/image_gray_CPU.jpeg")

cuda.is_available()

imflatten2 = im.copy().reshape(shape[0]*shape[1],3)

shape3 = np.shape(imflatten2)

devdata = cuda.to_device(imflatten2)
devOuput = cuda.device_array(shape3, np.uint8)

@cuda.jit
def grayscale(src, dst):
# where are we in the input?
  tidx = cuda.threadIdx.x + cuda.blockIdx.x * cuda.blockDim.x
  g = np.uint8((src[tidx, 0] + src[tidx, 1] + src[tidx, 2]) / 3)
  dst[tidx, 0] = dst[tidx, 1] = dst[tidx, 2] = g

t3 = time.time()

pixelCount = shape[0]*shape[1]
blockSize = 64
gridSize = int(pixelCount / blockSize)
grayscale[gridSize, blockSize](devdata, devOuput)

t4 = time.time()

print(t4-t3)

imgray2 = devOuput.copy_to_host()
imgray3 = imgray2.reshape(1080, 1920, 3)
imgpu = Image.fromarray(imgray3)
imgpu.save("/content/drive/MyDrive/Colab Notebooks/image_gray_GPU.jpeg")