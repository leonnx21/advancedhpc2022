# -*- coding: utf-8 -*-
"""HPC LW3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1flEHM8U6YdpyHYqVESkSc9cD0Ip0z__1
"""

from numba import cuda
import matplotlib.pyplot as plt
import numpy as np
import time
import math
from PIL import Image

from google.colab import drive
drive.mount('/content/drive')

im = plt.imread("/content/drive/MyDrive/Colab Notebooks/image.jpg")

shape = np.shape(im)
shape

devdata = cuda.to_device(im)
devOuput = cuda.device_array(shape, np.uint8)

@cuda.jit
def grayscale(src, dst):
  tidx = cuda.threadIdx.x + cuda.blockIdx.x * cuda.blockDim.x
  tidy = cuda.threadIdx.y + cuda.blockIdx.y * cuda.blockDim.y

  g = np.uint8((src[tidx, tidy, 0] + src[tidx, tidy, 1] + src[tidx, tidy, 2]) / 3)
  dst[tidx, tidy, 0] = dst[tidx, tidy, 1] = dst[tidx, tidy, 2] = g

def testfunc(x):
  t1 = time.time()
  blockSize = (x, x)
  gridSize = (math.ceil(shape[0]/blockSize[0]),math.ceil(shape[1]/blockSize[1]))
  grayscale[gridSize, blockSize](devdata, devOuput)
  t2 = time.time()
  t = t2 - t1

  return t

x =  list(range(1, 33))
result = []

for i in x:
  t3 = testfunc(i)
  result.append(t3)

plt.bar(x, result)
plt.yscale("log")



result

#imgray = devOuput.copy_to_host()
#imgpu = Image.fromarray(imgray)
#imgpu.save("/content/drive/MyDrive/Colab Notebooks/image_gray_GPU_2.jpeg")